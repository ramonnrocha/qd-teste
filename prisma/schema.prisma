// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password_hash String
  created_at    DateTime @default(now())
  cart          Cart[]
  orders        Order[]

  @@map("users")
}

model Product {
  id          String     @id @default(uuid())
  name        String
  description String
  price       Float      @default(0)
  cartItems   CartItem[]

  @@map("products")
}

model Cart {
  id         Int        @id @default(autoincrement())
  user       User       @relation(fields: [user_id], references: [id])
  user_id    String
  items      CartItem[]
  order      Order?     @relation(fields: [order_id], references: [id])
  order_id   String?    @unique
  status     String     @default("active")
  updated_at DateTime   @default(now())

  @@map("carts")
}

model CartItem {
  id         Int     @id @default(autoincrement())
  cart       Cart    @relation(fields: [cart_id], references: [id])
  cart_id    Int
  product    Product @relation(fields: [product_id], references: [id])
  product_id String
  quantity   Int
  price      Float   @default(0)
  Order      Order?  @relation(fields: [orderId], references: [id])
  orderId    String?

  @@map("itens-carts")
}

model Order {
  id          String     @id @default(uuid())
  user        User       @relation(fields: [user_id], references: [id])
  user_id     String
  items       CartItem[] // Use CartItem diretamente
  total_price Float      @default(0)
  status      String     @default("pending") // pending, completed, canceled
  created_at  DateTime   @default(now())
  cart        Cart?

  @@map("orders")
}
